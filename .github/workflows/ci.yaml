name: Bedrock Service CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/bedrock-chat-bedrock-service

jobs:
  lint:
    name: Lint Code
    runs-on: [self-hosted]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
    
    - name: Download dependencies
      run: |
        go mod download
        go mod tidy
    
    - name: Run go fmt
      run: |
        # Format the code first
        gofmt -s -w .
        
        # Check if any files were changed
        if [ -n "$(git diff --name-only)" ]; then
          echo "‚ùå Code was not formatted. The following files were reformatted:"
          git diff --name-only
          echo "Please run 'gofmt -s -w .' and commit the changes."
          exit 1
        fi
        echo "‚úÖ Code is properly formatted"
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Install staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest
    
    - name: Run staticcheck
      run: staticcheck ./...

  sast:
    name: SAST Security Analysis
    runs-on: [self-hosted]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Install security tools
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        go install golang.org/x/vuln/cmd/govulncheck@latest
    
    - name: Run gosec security analysis
      run: |
        gosec -fmt json -out gosec-report.json ./... || true
        gosec ./... || true
    
    - name: Run govulncheck
      run: |
        govulncheck ./... || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: gosec-report.json

  sca:
    name: Software Composition Analysis
    runs-on: [self-hosted]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Run Trivy config scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'table'

  unit-tests:
    name: Unit Tests
    runs-on: [self-hosted]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Create basic test if not exists
      run: |
        if [ ! -f main_test.go ]; then
          cat > main_test.go << 'EOF'
        package main

        import (
            "net/http"
            "net/http/httptest"
            "testing"
        )

        func TestRootHandler(t *testing.T) {
            req, err := http.NewRequest("GET", "/", nil)
            if err != nil {
                t.Fatal(err)
            }

            rr := httptest.NewRecorder()
            handler := http.HandlerFunc(rootHandler)
            handler.ServeHTTP(rr, req)

            if status := rr.Code; status != http.StatusOK {
                t.Errorf("handler returned wrong status code: got %v want %v",
                    status, http.StatusOK)
            }

            expected := "Bedrock Service is running"
            if !contains(rr.Body.String(), expected) {
                t.Errorf("handler returned unexpected body: got %v want to contain %v",
                    rr.Body.String(), expected)
            }
        }

        func contains(s, substr string) bool {
            return len(s) >= len(substr) && (s == substr || len(s) > len(substr) && (s[:len(substr)] == substr || s[len(s)-len(substr):] == substr || (len(s) > len(substr) && s[1:len(substr)+1] == substr)))
        }
        EOF
        fi
    
    - name: Run tests with coverage
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html || true
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.out
          coverage.html

  build:
    name: Build and Push Docker Image
    needs: [lint, sast, sca, unit-tests]
    runs-on: [self-hosted]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy image scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.meta.outputs.tags }}
        format: 'table'

  notify:
    name: CI Status Notification
    runs-on: [self-hosted]
    needs: [lint, sast, sca, unit-tests, build]
    if: always()
    steps:
    - name: CI Summary
      run: |
        echo "## üìä Bedrock Service CI Summary"
        echo "- **Lint**: ${{ needs.lint.result }}"
        echo "- **SAST**: ${{ needs.sast.result }}"
        echo "- **SCA**: ${{ needs.sca.result }}"
        echo "- **Unit Tests**: ${{ needs.unit-tests.result }}"
        echo "- **Build**: ${{ needs.build.result }}"
        
        if [ "${{ needs.build.result }}" == "success" ]; then
          echo "‚úÖ **CI Pipeline Successful - Ready for deployment!**"
        else
          echo "‚ùå **CI Pipeline Failed - Check logs above**"
        fi
