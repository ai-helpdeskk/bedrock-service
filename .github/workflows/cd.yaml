name: CD - Deploy to Kubernetes

on:
  workflow_run:
    workflows: ["Bedrock Service CI"]
    branches: [main]
    types:
      - completed
  push:
    branches:
      - '**'
    paths:
      - 'k8s/**'
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Bedrock Service
    runs-on: [self-hosted]
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha || github.sha }}

      - name: Verify environment
        run: |
          echo "üîç Verifying deployment environment..."
          echo "Runner: $(uname -a)"
          echo "Docker version: $(docker --version)"
          echo "kubectl version: $(kubectl version --client --short 2>/dev/null || echo 'kubectl not found')"
          
          # Check if kubectl works
          if ! kubectl cluster-info &>/dev/null; then
            echo "‚ùå kubectl cannot access cluster"
            exit 1
          fi
          echo "‚úÖ Environment verified"

      - name: Setup namespace and configuration
        run: |
          echo "üèóÔ∏è Setting up namespace and configuration..."
          
          # Create namespace if it doesn't exist
          kubectl create namespace bedrock-chat-v2 --dry-run=client -o yaml | kubectl apply -f -
          
          # Create app-config ConfigMap
          kubectl create configmap app-config \
            --from-literal=AWS_REGION="us-east-1" \
            --from-literal=BEDROCK_SERVICE_URL="http://bedrock-service:9000" \
            --from-literal=FILE_SERVICE_URL="http://file-service:7000" \
            --from-literal=DATABASE_URL="mysql://bedrock_user:bedrock_password@mysql:3306/bedrock_chat" \
            --from-literal=REACT_APP_API_URL="/api" \
            -n bedrock-chat-v2 \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "‚úÖ Configuration setup completed"

      - name: Setup AWS secrets from organization
        run: |
          echo "üîê Setting up AWS credentials from organization secrets..."
          
          # Verify AWS secrets are available
          if [[ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" || -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]]; then
            echo "‚ùå AWS organization secrets not found"
            echo "Available secrets:"
            echo "- AWS_ACCESS_KEY_ID: $([[ -n '${{ secrets.AWS_ACCESS_KEY_ID }}' ]] && echo 'Set' || echo 'Not set')"
            echo "- AWS_SECRET_ACCESS_KEY: $([[ -n '${{ secrets.AWS_SECRET_ACCESS_KEY }}' ]] && echo 'Set' || echo 'Not set')"
            exit 1
          fi
          
          # Create/update app-secrets with AWS credentials
          kubectl create secret generic app-secrets \
            --from-literal=AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            --from-literal=AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -n bedrock-chat-v2 \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "‚úÖ AWS credentials configured from organization secrets"

      - name: Deploy to Kubernetes
        run: |
          echo "üöÄ Deploying Bedrock Service to Kubernetes..."
          
          # Apply all Kubernetes manifests
          kubectl apply -f k8s/ -R -n bedrock-chat-v2
          
          echo "‚úÖ Kubernetes manifests applied successfully"

      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment to be ready..."
          
          # Wait for deployment with timeout
          if kubectl rollout status deployment/bedrock-service -n bedrock-chat-v2 --timeout=300s; then
            echo "‚úÖ Bedrock Service deployed successfully"
          else
            echo "‚ùå Deployment rollout timeout"
            echo "Current deployment status:"
            kubectl get deployment bedrock-service -n bedrock-chat-v2 -o wide
            kubectl get pods -n bedrock-chat-v2 -l app=bedrock-service
            exit 1
          fi

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."
          
          # Check deployment status
          echo "=== Deployment Status ==="
          kubectl get deployment bedrock-service -n bedrock-chat-v2 -o wide
          
          # Check pods
          echo "=== Pods ==="
          kubectl get pods -n bedrock-chat-v2 -l app=bedrock-service -o wide
          
          # Check service
          echo "=== Service ==="
          kubectl get service bedrock-service -n bedrock-chat-v2 -o wide
          
          # Wait for pods to be ready
          echo "‚è≥ Waiting for pods to be ready..."
          kubectl wait --for=condition=ready pod -l app=bedrock-service -n bedrock-chat-v2 --timeout=180s

      - name: Dynamic Application Security Testing (DAST) üõ°Ô∏è
        run: |
          echo "üõ°Ô∏è Starting DAST on deployed application..."
          
          # Get service cluster IP
          SERVICE_IP=$(kubectl get svc bedrock-service -n bedrock-chat-v2 -o jsonpath='{.spec.clusterIP}')
          echo "Testing service at IP: $SERVICE_IP"
          
          # Health check test
          echo "üè• Testing health endpoint..."
          kubectl run dast-health-test-$RANDOM \
            --image=curlimages/curl \
            --rm -i --restart=Never \
            --timeout=30s \
            -n bedrock-chat-v2 \
            -- curl -f -m 10 http://$SERVICE_IP:9000/health
          
          if [ $? -eq 0 ]; then 
            echo "‚úÖ DAST health check passed"
          else 
            echo "‚ùå DAST health check failed"
            exit 1
          fi
          
          # Root endpoint test
          echo "üåê Testing root endpoint..."
          kubectl run dast-root-test-$RANDOM \
            --image=curlimages/curl \
            --rm -i --restart=Never \
            --timeout=30s \
            -n bedrock-chat-v2 \
            -- curl -f -m 10 http://$SERVICE_IP:9000/
          
          if [ $? -eq 0 ]; then 
            echo "‚úÖ DAST root endpoint check passed"
          else 
            echo "‚ö†Ô∏è DAST root endpoint check failed"
          fi
          
          echo "‚úÖ DAST completed on live application"

      - name: Deployment Summary
        run: |
          echo "üéâ **Bedrock Service Deployment Summary**"
          echo ""
          echo "üìã **Final Status:**"
          kubectl get deployment,pods,svc -n bedrock-chat-v2 -l app=bedrock-service
          echo ""
          echo "üîß **Configuration:**"
          echo "- AWS Credentials: ‚úÖ Configured from organization secrets"
          echo "- Namespace: bedrock-chat-v2"
          echo "- Service URL: http://bedrock-service.bedrock-chat-v2.svc.cluster.local:9000"
          echo ""
          echo "üîó **Available Endpoints:**"
          echo "- Health: http://bedrock-service.bedrock-chat-v2.svc.cluster.local:9000/health"
          echo "- Generate: http://bedrock-service.bedrock-chat-v2.svc.cluster.local:9000/generate"
          echo ""
          echo "üìù **Management Commands:**"
          echo "- View logs: kubectl logs -f deployment/bedrock-service -n bedrock-chat-v2"
          echo "- Scale service: kubectl scale deployment bedrock-service --replicas=2 -n bedrock-chat-v2"
          echo "- Delete service: kubectl delete -f k8s/ -n bedrock-chat-v2"
          echo ""
          echo "‚úÖ **Deployment completed successfully!**"
