# BEDROCK SERVICE - CI.YML
# =====================================
# .github/workflows/ci.yml for Bedrock Service
name: CI - Build and Push Bedrock Service

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'README.md'
      - '.github/workflows/cd.yml'
      - 'docs/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: samitsinghhh/bedrock-service

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: |
        go mod download
        go mod tidy
        
    - name: Create test file
      run: |
        cat > main_test.go << 'EOF'
        package main

        import (
          "testing"
          "net/http"
          "net/http/httptest"
          "encoding/json"
        )

        func TestHealthHandler(t *testing.T) {
          bc := &BedrockClient{
            availableModels: []ModelInfo{
              {ID: "test-model", Name: "Test Model", Available: true},
            },
          }
          
          req, err := http.NewRequest("GET", "/health", nil)
          if err != nil {
            t.Fatal(err)
          }
          
          rr := httptest.NewRecorder()
          handler := healthHandler(bc)
          handler.ServeHTTP(rr, req)
          
          if status := rr.Code; status != http.StatusOK {
            t.Errorf("handler returned wrong status code: got %v want %v",
              status, http.StatusOK)
          }
        }

        func TestRootHandler(t *testing.T) {
          req, err := http.NewRequest("GET", "/", nil)
          if err != nil {
            t.Fatal(err)
          }
          
          rr := httptest.NewRecorder()
          rootHandler(rr, req)
          
          if status := rr.Code; status != http.StatusOK {
            t.Errorf("handler returned wrong status code: got %v want %v",
              status, http.StatusOK)
          }
        }
        EOF
      
    - name: Run tests
      run: go test -v ./... -race -coverprofile=coverage.out
      
    - name: Run go vet
      run: go vet ./...

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: docker_build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Image push confirmation
      run: |
        echo "✅ Image successfully pushed to Docker Hub"
        echo "📦 Image digest: ${{ steps.docker_build.outputs.digest }}"
        echo "🏷️ Tags pushed:"
        echo "${{ steps.meta.outputs.tags }}"

    - name: Update deployment manifest
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      env:
        GITHUB_TOKEN: ${{ secrets.MANIFEST_REPO_TOKEN }}
      run: |
        set -e
        echo "📝 Updating deployment manifest..."
        
        git clone https://github.com/${{ github.repository_owner }}/k8s-manifests.git
        cd k8s-manifests
        
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"
        
        # Find deployment file
        DEPLOYMENT_FILE=""
        for path in "k8s/deployments/bedrock-service-deployment.yaml" "deployments/bedrock-service-deployment.yaml"; do
          if [ -f "$path" ]; then
            DEPLOYMENT_FILE="$path"
            echo "✅ Found deployment file: $DEPLOYMENT_FILE"
            break
          fi
        done
        
        if [ -z "$DEPLOYMENT_FILE" ]; then
          echo "❌ ERROR: bedrock-service-deployment.yaml not found!"
          exit 1
        fi
        
        # Update image tag
        SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        NEW_IMAGE="${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${SHORT_SHA}"
        
        echo "🔄 Updating image to: $NEW_IMAGE"
        sed -i "s|image: samitsinghhh/bedrock-service:.*|image: ${NEW_IMAGE}|g" "$DEPLOYMENT_FILE"
        
        # Commit and push if there are changes
        if ! git diff --quiet; then
          git add "$DEPLOYMENT_FILE"
          git commit -m "🚀 Update bedrock-service to ${{ github.ref_name }}-${SHORT_SHA}"
          git push origin main
          echo "✅ Deployment manifest updated"
        else
          echo "ℹ️ No changes needed"
        fi

    - name: Trigger deployment
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      env:
        GITHUB_TOKEN: ${{ secrets.MANIFEST_REPO_TOKEN }}
      run: |
        ENV=$([[ "${{ github.ref }}" == "refs/heads/main" ]] && echo "production" || echo "staging")
        SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        
        echo "🚀 Triggering deployment to $ENV"
        
        curl -X POST \
          -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository_owner }}/k8s-manifests/dispatches \
          -d "{\"event_type\":\"deploy-bedrock-service\",\"client_payload\":{\"environment\":\"$ENV\",\"service\":\"bedrock-service\",\"image_tag\":\"${{ github.ref_name }}-${SHORT_SHA}\"}}"
        
        echo "✅ Deployment triggered"
