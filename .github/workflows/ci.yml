# .github/workflows/ci.yml for Bedrock Service
name: CI - Build and Push Bedrock Service

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**'
      - '!README.md'
      - '!.github/workflows/cd.yml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: samitsinghhh/bedrock-service

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Initialize Go module
      run: |
        if [ ! -f go.sum ]; then
          go mod download
          go mod tidy
        fi
        
    - name: Download dependencies
      run: go mod download
      
    - name: Create basic test if not exists
      run: |
        if [ ! -f "*_test.go" ]; then
          cat > main_test.go << 'EOF'
        package main

        import (
          "testing"
          "net/http"
          "net/http/httptest"
          "encoding/json"
        )

        func TestHealthHandler(t *testing.T) {
          // Mock BedrockClient
          bc := &BedrockClient{
            availableModels: []ModelInfo{
              {ID: "test-model", Name: "Test Model", Available: true},
            },
          }
          
          req, err := http.NewRequest("GET", "/health", nil)
          if err != nil {
            t.Fatal(err)
          }
          
          rr := httptest.NewRecorder()
          handler := healthHandler(bc)
          handler.ServeHTTP(rr, req)
          
          if status := rr.Code; status != http.StatusOK {
            t.Errorf("handler returned wrong status code: got %v want %v",
              status, http.StatusOK)
          }
          
          var response HealthResponse
          if err := json.Unmarshal(rr.Body.Bytes(), &response); err != nil {
            t.Fatal(err)
          }
          
          if response.Status != "healthy" {
            t.Errorf("expected status healthy, got %s", response.Status)
          }
        }

        func TestRootHandler(t *testing.T) {
          req, err := http.NewRequest("GET", "/", nil)
          if err != nil {
            t.Fatal(err)
          }
          
          rr := httptest.NewRecorder()
          rootHandler(rr, req)
          
          if status := rr.Code; status != http.StatusOK {
            t.Errorf("handler returned wrong status code: got %v want %v",
              status, http.StatusOK)
          }
          
          var response map[string]string
          if err := json.Unmarshal(rr.Body.Bytes(), &response); err != nil {
            t.Fatal(err)
          }
          
          if _, ok := response["message"]; !ok {
            t.Error("expected message field in response")
          }
        }
        EOF
        fi
      
    - name: Run tests
      run: go test -v ./...
      
    - name: Run go vet
      run: go vet ./...
      
    - name: Run static analysis
      uses: dominikh/staticcheck-action@v1.3.0
      with:
        version: "2023.1.6"
        install-go: false
      continue-on-error: true

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Wait for image availability
      run: |
        echo "Waiting for image to be available in registry..."
        sleep 30
        
        IMAGE_TAG="${{ github.ref_name }}-${{ github.sha }}"
        echo "Checking for image: ${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
        
        for i in {1..6}; do
          if docker manifest inspect ${{ env.IMAGE_NAME }}:${IMAGE_TAG} > /dev/null 2>&1; then
            echo "✅ Image verified successfully"
            break
          else
            echo "⏳ Attempt $i: Image not yet available, waiting..."
            sleep 20
          fi
          
          if [ $i -eq 6 ]; then
            echo "❌ Image verification failed after 6 attempts"
            exit 1
          fi
        done

    - name: Update deployment manifest
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      env:
        GITHUB_TOKEN: ${{ secrets.MANIFEST_REPO_TOKEN }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        set -e
        
        echo "Cloning k8s-manifests repository..."
        git clone https://github.com/${{ github.repository_owner }}/k8s-manifests.git
        cd k8s-manifests
        
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"
        
        # Find the deployment file
        DEPLOYMENT_FILE=""
        POSSIBLE_PATHS=(
          "deployments/bedrock-service-deployment.yaml"
          "k8s/deployments/bedrock-service-deployment.yaml"
          "manifests/bedrock-service-deployment.yaml"
        )
        
        echo "Looking for deployment file..."
        for path in "${POSSIBLE_PATHS[@]}"; do
          if [ -f "$path" ]; then
            DEPLOYMENT_FILE="$path"
            echo "✅ Found deployment file at: $DEPLOYMENT_FILE"
            break
          fi
        done
        
        if [ -z "$DEPLOYMENT_FILE" ]; then
          echo "❌ ERROR: bedrock-service-deployment.yaml not found!"
          echo "Available files:"
          find . -name "*.yaml" -type f | head -20
          exit 1
        fi
        
        # Update image tag
        cp "$DEPLOYMENT_FILE" "${DEPLOYMENT_FILE}.backup"
        NEW_IMAGE="${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${IMAGE_TAG}"
        
        echo "Updating image from:"
        grep -n "image:" "$DEPLOYMENT_FILE" || echo "No image lines found"
        
        # Use more specific sed pattern
        sed -i "s|image: samitsinghhh/bedrock-service:.*|image: ${NEW_IMAGE}|g" "$DEPLOYMENT_FILE"
        
        echo "Updated image to:"
        grep -n "image:" "$DEPLOYMENT_FILE"
        
        # Check if changes were made
        if diff "$DEPLOYMENT_FILE" "${DEPLOYMENT_FILE}.backup" > /dev/null; then
          echo "ℹ️ No changes needed - image already up to date"
          exit 0
        fi
        
        git add "$DEPLOYMENT_FILE"
        git commit -m "🚀 Update bedrock-service image to ${{ github.ref_name }}-${IMAGE_TAG}"
        git push origin main
        
        echo "✅ Successfully updated deployment manifest"

    - name: Trigger deployment
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          ENV="production"
        else
          ENV="staging"
        fi
        
        echo "🚀 Triggering deployment for $ENV environment"
        
        curl -X POST \
          -H "Authorization: token ${{ secrets.MANIFEST_REPO_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository_owner }}/k8s-manifests/dispatches \
          -d "{\"event_type\":\"deploy-bedrock-service\",\"client_payload\":{\"environment\":\"$ENV\",\"service\":\"bedrock-service\",\"image_tag\":\"${{ github.ref_name }}-${{ github.sha }}\",\"repository\":\"${{ github.repository }}\"}}"
        
        echo "✅ Deployment trigger sent successfully"

    - name: Job summary
      if: always()
      run: |
        echo "## 🚀 Bedrock Service CI/CD Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ **All steps completed successfully!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Pipeline failed. Check the logs above.**" >> $GITHUB_STEP_SUMMARY
        fi
